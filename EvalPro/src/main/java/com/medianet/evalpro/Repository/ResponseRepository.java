package com.medianet.evalpro.Repository;


import com.medianet.evalpro.Entity.Response;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;


import java.util.List;

public interface ResponseRepository extends JpaRepository<Response, Long> {

    // 1) Recherche pagin√©e sur la valeur de la r√©ponse
    Page<Response> findByValueContainingIgnoreCase(String value, Pageable pageable);

    // 2) Liste brute des r√©ponses d‚Äôun dossier
    List<Response> findByDossierId(Long dossierId);

    // 3) Liste brute des r√©ponses d‚Äôun utilisateur
    List<Response> findByUserId(Long userId);

    List<Response> findByFormIdAndDossierId(Long id, Long dossierId);

    // üî• M√©thode de suppression √† ajouter :
    //   void deleteByDossierIdAndStepIdAndQuestionId(Long dossierId, Long stepId, Long questionId);




    //Supprime les r√©ponses d‚Äôun formulaire donn√© pour un dossier et une √©tape sp√©cifique.
    @Modifying
    @Query("DELETE FROM Response r WHERE r.form.id = :formId AND r.dossier.id = :dossierId AND r.step.id = :stepId")
    void deleteByFormIdAndDossierIdAndStepId(@Param("formId") Long formId,
                                             @Param("dossierId") Long dossierId,
                                             @Param("stepId") Long stepId);

    //Comme ci-dessus, mais plus cibl√© : filtre aussi par pilier (pillar) ‚Äî utilis√© notamment dans l‚Äô√©tape 3 (auto-√©valuation).
    @Modifying
    @Query("DELETE FROM Response r WHERE r.form.id = :formId AND r.dossier.id = :dossierId AND r.pillar = :pillar AND r.step.id = :stepId")
    void deleteByFormIdAndDossierIdAndPillarAndStepId(@Param("formId") Long formId,
                                                      @Param("dossierId") Long dossierId,
                                                      @Param("pillar") String pillar,
                                                      @Param("stepId") Long stepId);



    //Retourne les r√©ponses pour un dossier, un nom d‚Äô√©tape (step.name), et un pilier.
    //Utile pour v√©rifier si un pilier a √©t√© rempli dans l‚Äô√©tape 3.
    @Query("SELECT r FROM Response r WHERE r.dossier.id = :dossierId AND r.step.name = :step AND r.question.pillar = :pillar")
    List<Response> findByDossierIdAndStepAndPillar(
            @Param("dossierId") Long dossierId,
            @Param("step") String step,
            @Param("pillar") String pillar
    );


    boolean existsByDossierIdAndStepId(Long dossierId, long l);
    boolean existsByDossierIdAndQuestionPillar(Long dossierId, String pillar);

    //une m√©thode pour compter les r√©ponses par pilier et dossier
    @Query("SELECT COUNT(r) FROM Response r WHERE r.dossier.id = :dossierId AND r.question.pillar = :pillar AND r.step.id = 3")
    Long countResponsesByDossierIdAndPillar(@Param("dossierId") Long dossierId, @Param("pillar") String pillar);




}


//Cette interface h√©rite de JpaRepository<Response, Long>, ce qui lui fournit d√©j√† toutes les op√©rations CRUD de base :
//
//findAll(), findById(), save(), deleteById()...
//
//Elle ajoute ici des requ√™tes personnalis√©es pour g√©rer la logique m√©tier autour des r√©ponses utilisateur (Response), notamment :
//
//la recherche,
//
//la suppression cibl√©e,
//
//la r√©cup√©ration par dossier, pilier ou utilisateur,
//
//les v√©rifications d'existence.